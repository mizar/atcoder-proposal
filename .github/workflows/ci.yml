name: CI

on:
  push:

jobs:
  actionlint:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      - name: Update ShellCheck
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck
          shellcheck -V

      - name: actionlint
        run: |
          bash <(curl https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash)
          ./actionlint -color

  typos:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      - uses: crate-ci/typos@master

  rustfmt:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      - name: Read ./rust-toolchain
        id: read-rust-toolchain
        run: echo "toolchain=$(cat ./rust-toolchain)" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.read-rust-toolchain.outputs.toolchain }}
          components: rustfmt

      - name: Rustfmt (judge)
        run: cargo fmt --all -- --check

      - name: Rustfmt (xtask)
        run: cargo fmt --all --manifest-path ./xtask/Cargo.toml -- --check

  clippy:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      - name: Read ./rust-toolchain
        id: read-rust-toolchain
        run: echo "toolchain=$(cat ./rust-toolchain)" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.read-rust-toolchain.outputs.toolchain }}
          components: clippy

      - name: Clippy (xtask)
        run: cargo clippy --manifest-path ./xtask/Cargo.toml

  cargo-deny:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      - name: Read ./rust-toolchain
        id: read-rust-toolchain
        run: echo "toolchain=$(cat ./rust-toolchain)" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.read-rust-toolchain.outputs.toolchain }}

      - name: Install cargo-binstall
        uses: taiki-e/install-action@cargo-binstall

      - name: Install cargo-deny
        run: cargo binstall cargo-deny@^0.13 --no-confirm --log-level debug

      - name: cargo-deny (judge)
        run: cargo deny check

  bottlerocket-license-scan:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      - name: Read ./rust-toolchain
        id: read-rust-toolchain
        run: echo "toolchain=$(cat ./rust-toolchain)" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.read-rust-toolchain.outputs.toolchain }}

      - name: Install bottlerocket-license-scan
        run: cargo install bottlerocket-license-scan --git https://github.com/bottlerocket-os/bottlerocket-sdk

      - name: bottlerocket-license-scan (judge)
        run: |
          git clone https://github.com/spdx/license-list-data.git /tmp/license-list-data --depth 1
          ~/.cargo/bin/bottlerocket-license-scan --clarify ./clarify.toml --out-dir ./license_files --spdx-data /tmp/license-list-data/json/details cargo ./Cargo.toml
          tree ./license_files

  build:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      - name: Update ShellCheck
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck
          shellcheck -V

      - name: Read ./rust-toolchain
        id: read-rust-toolchain
        run: echo "toolchain=$(cat ./rust-toolchain)" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.read-rust-toolchain.outputs.toolchain }}

      - name: Generate install-command.bash
        run: cargo xtask gen-command > ./install-command.bash

      - name: docker-build
        run: docker build .
